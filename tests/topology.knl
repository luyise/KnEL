Variables = {
  A : Type_∞;
  Le : A → A → Type_∞;
  Join : Π (I : Type_∞), Π (U : I → A), A;
  Cap : Π (U : A), Π (V : A), A;
  LeJoin : Π (I : Type_∞), Π (U : I → A),
    Π (i : I),  Le (U i) (Join I U);
  LeCap1 : Π (U : A), Π (V : A), Le (Cap U V) U;
  LeCap2 : Π (U : A), Π (V : A), Le (Cap U V) V;
  SupJoin : Π (I : Type_∞), Π (U : I → A), Π (W : A),
    (Π (i : I), Le (U i) W) → Le (Join I U) W;
  InfCap : Π (U : A), Π (V : A), Π (W : A),
    Le W U → Le W V → Le W (Cap U V)
}

Definition Eq : A → A → Type_∞ :=
  λ (U : A) → λ (V : A) →
    ((Le U V) × (Le V U))
End

Lemma Cap_exchange :
  Π (U : A), Π (V : A), Eq (Cap U V) (Cap V U)
Proof
  Intro U;
  Intro V;
  Unfold Eq;
  Reduce;
  Define Ineq1 (LeCap2 U V) (Le (Cap U V) V);
  Define Ineq2 (LeCap1 U V) (Le (Cap U V) U);
  Define Ineq3 (InfCap V U (Cap U V) Ineq1 Ineq2) (Le (Cap U V) (Cap V U));
  Define Ineq4 (LeCap2 V U) (Le (Cap V U) U);
  Define Ineq5 (LeCap1 V U) (Le (Cap V U) V);
  Define Ineq6 (InfCap U V (Cap V U) Ineq4 Ineq5) (Le (Cap V U) (Cap U V));
  //Exact ((Ineq3 , Ineq6) in (λ (_ : (Le (Cap U V) (Cap V U))) → (Le (Cap V U) (Cap U V))));
Ongoing