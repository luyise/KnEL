open test0
open test3
open num.test_num as Num
open <-tests2.test4
open Lib

Definition id (x y: Type) : Type := x
End

Theorem my_first_Theorem:
    ¬¬¬A → ¬A
Proof
    Intro NNN_a;
    Intro a;
    Apply NNN_a;
    Lib.fast_tac n_a;
    Exact a;
QED

Theorem:
    ∀ (X: Type) (P Q R: X → Type), 
        (∀ x : X, P x → Q x) →
        (∀ x : X, Q x → R x) → 
        (∃ x : X, P x) → ∃ x : X, R x
Proof
    Intro X;
    Intro P;
    Intro Q;
    Intro R;
    Intro I1;
    Intro I2;
    Intro Ex;
    Lib.Apply_in X Q R I2;
    Lib.Apply_in X P Q I1;
    Exact Ex;
QED

Theorem:
    ∀ x: int, ∃ y: int, (y + x = y + x, x, y)
Proof
Admitted

// Basic Tactics :
//
// Intro (name : ident)
// Apply (f_term : term)
// Split
// ProdRec [name1 : ident, name2 : ident, ..., namen : ident]
// Choose (n : int)
// SumRec
// Exact (t : term)
//
// Combined Tactics :
